Web service : Standardised method for communication between client and server
            : Software module
            : Set of protocols that enable communication

Type of Webservices:
    1. Soap Webservices => XML => Simple object access protocol
    2. RESTful Webservices => JSON =>

- Communication between client and server happens in the format of XML messages(operates between diff OS too)

- XML messages are encoded which provides security
- XML needs to works with http,smtp,tcp(commonly http). It can't work standard alone
- Any language can interrupt SOAP services(Main Drawback and Choose spring)
Uses:
- Enterprise level applications
- Business2Business(B2B) communication/applications
- integration between legacy systems

RESTful => Representational state transfer Webservices
JSON expansion JavaScript Object Notation
- Always uses HTTP/HTTPS
- Relay on JSON which is lightweight
- RESTful are stateless => no info about the previous request from the client will be held by the server
- Client-Server architecture
- HTTPS uses GET,POST,UPDATE,DELETE so on..
GET - fetch some data from the server
POST - post some data to the server
Shopping portal -> application endpoints-> list of all items in my shop
                -> pickup the product and read details of product
                -> point of communication in each method is API
Uses:
public APIs - Application Interface
Mobile Application Development
MicroService Architecture

About MicroService Architecture:

before emergence of cloud applications, physical computers located in Hometown
The customers details need to store in computer => here physical Computer act as server with one IP address
IP address cannot be memorized so we give DNS => www.shopping.com

If my computer can handle my shopping application by adding another Phys computer to balance the user request

But nowadays using cloud we can divide everything into modules
If one system doesnt work another will work these technology is called Microservice Architecture

Hexagonal Architecture will come into demand since MicroService Architecture is costlier

Process of working when domain is entered:
www.yeswanth.com => browser => domain name server(DNS)=> ip address => talk to server => see the website in your browser

-----------------------------
Server => Tomcat Server one server in java based web applications

Protocol used by RESTfull services is HTTPS => hypertext transfer protocol with security

HTTPS => acts between web browser - web server (Stateless protocol)

Status codes => 200,404,405,500,502 many..
https://www.yeswanth.com => secured website
http://www.yeswanth.com => not secured website

Spring Framework:
    - Open Source Application Framework for java
    - Development of Enterprise Application
    - Open Source means open to everyone(no need to pay)

Key Aspects :
    - Inversion of Control(IoC): Core Principle of Spring frameWork
    - Objects called as Beans or Components
    - Manage the creation and writing of objects
    - Loose coupling => functions are little bit dependent on each other
    - IoC makes code make more testable Maintenance

Dependency Injection(DI):
    - it is carried out by IoC
    - Two ways : -> Constructor DI and Setter Injection

AOP Aspect Oriented Programming:
Logging -> process keeping track of every activity
Security, transaction, actual business logic are separated by using AOP and makes server crash free
these separating things makes faster and easier separation

Spring Container:
Managing the lifecycle of bean or a component
BeanFactory, ApplicationContent -> (just read about these)

Spring Modules:
